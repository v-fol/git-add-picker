#!/usr/bin/env bash
set -euo pipefail

# Ensure required commands exist
command -v git >/dev/null || { echo "git not found"; exit 1; }
command -v fzf >/dev/null || { echo "fzf not found"; exit 1; }

git rev-parse --is-inside-work-tree >/dev/null 2>&1 || {
  echo "Not inside a git repository"
  exit 1
}

LIST_SCRIPT="$(mktemp)"
PREVIEW_SCRIPT="$(mktemp)"
trap 'rm -f "$LIST_SCRIPT" "$PREVIEW_SCRIPT"' EXIT

# ----------------------------
# LIST_SCRIPT: generate file list with colors
# ----------------------------
cat > "$LIST_SCRIPT" <<'EOF'
#!/usr/bin/env bash
RED=$(printf '\033[31m')
GREEN=$(printf '\033[32m')
YELLOW=$(printf '\033[33m')
RESET=$(printf '\033[0m')

query="$1"

# Modified files
git status --porcelain=v1 -uno | awk -v RED="$RED" -v GREEN="$GREEN" -v YELLOW="$YELLOW" -v RESET="$RESET" '
{
  s1=substr($0,1,1);
  s2=substr($0,2,1);
  path=substr($0,4);
  idx=index(path, " -> ");
  if (idx>0) path=substr(path, idx+4);

  if (s1!=" " && s2!=" ") { status="B"; color=YELLOW; }
  else if (s1!=" ")       { status="S"; color=GREEN; }
  else                    { status="U"; color=RED; }

  print status "\t" path "\t" color path RESET;
}' 

# If query is non-empty, add untracked files
if [ -n "$query" ]; then
    git ls-files --others --exclude-standard | awk -v RED="$RED" -v RESET="$RESET" '{print "U\t"$0"\t"RED$0RESET}'
fi
EOF
chmod +x "$LIST_SCRIPT"

# ----------------------------
# PREVIEW_SCRIPT: show diffs with minimalistic delta
# ----------------------------
cat > "$PREVIEW_SCRIPT" <<'EOF'
#!/usr/bin/env bash
status="$1"
file="$2"

show_diff() {
    if command -v delta >/dev/null 2>&1; then
        git "$@" --color=always -- "$file" | delta --file-style=omit --hunk-header-style=omit 
    else
        git "$@" --color=always -- "$file"
    fi
}

case "$status" in
    S)  # Staged only
        show_diff diff --cached
        ;;
    U)  # Unstaged or untracked
        if [ -f "$file" ]; then
            show_diff diff || true
        else
            cat "$file" 2>/dev/null || echo "[New file: $file]"
        fi
        ;;
    B)  # Both staged and unstaged
        show_diff diff --cached || true
        echo
        echo "----- Unstaged -----"
        show_diff diff || true
        ;;
    *)  # fallback
        cat "$file"
        ;;
esac
EOF
chmod +x "$PREVIEW_SCRIPT"

# ----------------------------
# Run fzf with preview
# ----------------------------
LIST_CMD="$LIST_SCRIPT"

if [ -z "$($LIST_CMD "")" ]; then
  echo "No changes."
  exit 0
fi

# FZF options
$LIST_CMD "" | \
fzf --ansi --delimiter=$'\t' --with-nth=3 \
    --preview "$PREVIEW_SCRIPT {1} {2}" \
    --preview-window=right:70%:wrap \
    --header $'Space = stage/unstage (live) • Enter = quit • Colors: \033[32mstaged\033[0m / \033[31munstaged\033[0m / \033[33mpartial\033[0m' \
    --height=100% --min-height=10 \
    --bind "space:execute-silent(bash -lc 'st=\"{1}\"; f=\"{2}\"; if [ \"\$st\" = S ] || [ \"\$st\" = B ]; then git restore --staged -- \"\$f\"; else git add -- \"\$f\"; fi')+reload($LIST_CMD)" \
    --bind "change:reload($LIST_CMD {q})" \
    --bind "enter:accept"
